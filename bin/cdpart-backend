#!perl

# DATE
# VERSION

#IFUNBUILT
use strict;
use warnings;
#END IFUNBUILT

if (@ARGV != 1) { print ".\n"; exit }

my $cwd = $ENV{PWD} || do { require Cwd; Cwd::cwd() };
my @elems = split m!/+!, $cwd;

for my $i (reverse 0..$#elems) {
    my @newelems = @elems; $newelems[$i] = $ARGV[0];
    my $newpath = join "/", @newelems;
    if (-d $newpath) { print "$newpath\n"; exit }
}

# no match
print ".\n";

# ABSTRACT: Change directory part
# PODNAME:

=head1 SYNOPSIS

To use in shell:

 % cdpart() { cd `cdpart-backend "$1"`; }

 % cd /media/mv/en/c/celine-dion
 % cdpart fr; # /media/mv/fr/c/celine-dion


=head1 DESCRIPTION

B<cdpart> is a command to change directory which can be convenient in some
cases. It takes your argument and tries to substitute your argument into the
directory path element starting from the deepest to the topmost, stopping after
it finds an existing directory, then change to the directory.

The best way to explain it is by an example. Consider this directory structure:

 media/
   mv/
     en/
       a/
       b/
       c/
         carly-rae-japsen/
         celine-dion/
         charlie-puth/
         ...
       ...
     fr/
       a/
       b/
       c/
         celine-dion/
         christophe-willem/
         ...
     de/
     ...
   music/
     en/
       a/
       b/
       c/
         celine-dion/
         ...
     fr/
       a/
       b/
       c/
         celine-dion/
         ...
       ...
     ...
  ...

You can see that the directories C<mv> and C<music> have the same structure: the
first subdirectory level is language code (C<en>, C<fr>, ...), the second level
is the first letter of artist's name (C<a>, C<b>, C<c>, ...) and the third level
is the name of the artist.

Suppose you are now in directory:

 /media/mv/en/c/celine-dion

and you want to see CÃ©line's French music videos (in
C</media/mv/fr/c/celine-dion>). If you use B<cd>, the command will be:

 % cd ../../fr/c/celine-dion

which is too much to type because you are retyping the substructure. With
B<cdpart> you just have to type:

 % cdpart fr

What B<cdpart> will do is try the following directories in order:

 /media/mv/en/c/fr
 /media/mv/en/fr/celine-dion
 /media/mv/fr/c/celine-dion

The third succeeds so it goes there. If no match is found until the topmost
directory, B<cdpart> will not change directory.

Another example:

 % cdpart music

will eventually change the directory to C</media/music/fr/c/celine-dion>.
