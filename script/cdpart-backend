#!perl

use 5.010001;
use strict;
use warnings;

use Complete::Util qw(complete_array_elem hashify_answer);
use Cwd qw(cwd);
use File::chdir;
use Getopt::Long::Complete qw(GetOptionsWithCompletion);

# AUTHORITY
# DATE
# DIST
# VERSION

# FRAGMENT id=shcompgen-hint completer=1 for=cdpart

our $DEBUG = $ENV{DEBUG};
our $COMPLETE_MAX_ENTRIES_PER_LEVEL = $ENV{CDPART_COMPLETE_MAX_ENTRIES_PER_LEVEL} // 100;

my $cwd = $ENV{PWD} || cwd();
my @cwd_elems = split m!/+!, $cwd;

GetOptionsWithCompletion(
    sub {
        my %args = @_;
        my $type = $args{type};
        my $word = $args{word};

        return undef unless $type eq 'arg'; ## no critic: Subroutines::ProhibitExplicitReturnUndef
        my @res;

        #for (reverse 1 .. $#cwd_elems) {
        #    push @res0, {
        #        word => $cwd_elems[$_],
        #        summary => join("/", @cwd_elems[0 .. $_]),
        #    };
        #}

        local $Complete::Common::OPT_CHAR_MODE = 0 unless defined $ENV{COMPLETE_OPT_CHAR_MODE};
        local $Complete::Common::OPT_FUZZY = 0 unless defined $ENV{COMPLETE_OPT_FUZZY};

        while (1) {
            #last if @res >= $COMPLETE_MAX_ENTRIES;
            pop @cwd_elems;
            $CWD = "..";
            last unless @cwd_elems >= 1;
            my $entry;
            opendir my $dh, ".";
            my @dirs =grep { $_ ne '.' && $_ ne '..' && (-d $_) } readdir($dh);
            closedir $dh;
            my $level_res = complete_array_elem(word => $word, array => \@dirs);
            #use DD; dd $level_res;
            for (@{ $level_res }) {
                push @res, {
                    word => $_,
                    summary => join("/", @cwd_elems, $_),
                }
            }
        }
        \@res;
    },
    'help|h' => sub {
        print <<USAGE;
Usage:
  % cdpart [options] <dirname>
Options:
  --help, -h
  --version, -v
USAGE
        exit 0;
    },
    'version|v' => sub {
        no warnings 'once';
        print "cdpart version ", ($main::VERSION || "dev"), "\n";
        exit 0;
    },
);

if (@ARGV != 1) { print ".\n"; exit }

while (@cwd_elems >= 1) {
    for my $i (reverse 0..$#cwd_elems) {
        my @newpath_elems = @cwd_elems; $newpath_elems[$i] = $ARGV[0];
        my $newpath = join "/", @newpath_elems;
        warn "cdpart: Trying $newpath\n" if $DEBUG;
        if (-d $newpath) {
            warn "cdpart: Found\n" if $DEBUG;
            print "$newpath\n";
            exit;
        }
    }
    pop @cwd_elems;
}

# no match
warn "cdpart: Can't find any match, giving up\n" if $DEBUG;
print ".\n";

# ABSTRACT: Change directory part
# PODNAME:

=head1 SYNOPSIS

To use in shell:

 % cdpart() { cd `cdpart-backend "$1"`; }

 % cd /media/mv/en/c/celine-dion
 % cdpart fr; # /media/mv/fr/c/celine-dion


=head1 DESCRIPTION

B<cdpart> is a command to change directory which can be convenient in some
cases. It takes your argument and tries to substitute your argument into the
directory path element starting from the deepest to the topmost, stopping after
it finds an existing directory, then change to the directory.

The best way to explain it is by an example. Consider this directory structure:

 media/
   mv/
     en/
       a/
       b/
       c/
         carly-rae-japsen/
         celine-dion/
         charlie-puth/
         ...
       ...
     fr/
       a/
       b/
       c/
         celine-dion/
         christophe-willem/
         ...
     de/
     ...
   music/
     en/
       a/
       b/
       c/
         celine-dion/
         ...
     fr/
       a/
       b/
       c/
         celine-dion/
         ...
       ...
     ...
  ...

You can see that the directories C<mv> and C<music> have the same structure: the
first subdirectory level is language code (C<en>, C<fr>, ...), the second level
is the first letter of artist's name (C<a>, C<b>, C<c>, ...) and the third level
is the name of the artist.

Suppose you are now in directory:

 /media/mv/en/c/celine-dion

and you want to see CÃ©line's French music videos (in
C</media/mv/fr/c/celine-dion>). If you use B<cd>, the command will be:

 % cd ../../fr/c/celine-dion

which is too much to type because you are retyping the substructure. With
B<cdpart> you just have to type:

 % cdpart fr

What B<cdpart> will do is try the following directories in order:

 /media/mv/en/c/fr
 /media/mv/en/fr/celine-dion
 /media/mv/fr/c/celine-dion

The third succeeds so it goes there. If no match is found until the topmost
directory, B<cdpart> will try these in order:

 /media/mv/en/fr
 /media/mv/fr/c
 /media/fr/en/c
 /fr/mv/en/c

 /media/mv/fr
 /media/fr/en
 /fr/mv/en

 /media/fr
 /fr/mv

 /fr

If the last doesn't succeed too, B<cdpart> won't change directory.

Another example:

 % cdpart music

will eventually change the directory to C</media/music/fr/c/celine-dion>.


=head1 ENVIRONMENT

=head2 DEBUG

Bool. If set to true, will print the directories as they are tried.

=head2 CDPART_COMPLETE_ARRAY_ELEM_PER_LEVEL

Uint.


=head1 SEE ALSO

L<cdpart-backend>
